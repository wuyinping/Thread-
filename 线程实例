import threading
from time import sleep,ctime

loops=[4,2]

def loop(nloop,nsec):
    print 'start loop',nloop,'at:',ctime()
    sleep(nsec)
    print'loop',nloop,'done at:',ctime()


class ThreadFunc(object):
    def __init__(self,func,args,name=''):
        self.name=name
        self.func=func
        self.args=args
    def __call__(self):
        apply(self.func,self.args)
    
def main():
    print 'start at:',ctime()
    threads=[]
    nloops=range(len(loops))
    for i in nloops:
        print 'i=',i
        print'loops[i]=',loops[i]
        #创建一个thread的实例传递给他一个类
        t=threading.Thread(target=ThreadFunc(loop,args=(i,loops[i]),name=loop.__name__))
        threads.append(t)
    for i in nloops:
        threads[i].start()
    #需要等待线程结束的时候，才调用join
    for i in nloops:
        threads[i].join()
    print 'all done at:',ctime()

if __name__=='__main__':
    main()
